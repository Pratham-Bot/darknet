#version 460 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Input buffer binding points
layout(std430, binding = 0) buffer X {
    float x[];
};

layout(std430, binding = 1) buffer Output {
    float output[];
};

uniform int inputChannels;
uniform int inputHeight;
uniform int inputWidth;
uniform int kernelSize;
uniform int stride;
uniform int padding;

void main() {
    int n = int(gl_GlobalInvocationID.x);  // Output index
    int k = int(gl_GlobalInvocationID.y);  // Input channel index
    int h_out = int(gl_GlobalInvocationID.z);  // Output height index

    int kernelExtent = kernelSize / 2;

    int inputWidthPadded = inputWidth + 2 * padding;
    int inputHeightPadded = inputHeight + 2 * padding;

    // Compute input and output indices for im2col operation
    int h_in = h_out * stride - padding + kernelExtent;
    int w_in = n % inputWidthPadded * stride - padding + kernelExtent;
    int c_in = n / (inputWidthPadded * inputHeightPadded);

    int outputIndex = (n * inputChannels + k) * inputHeight * inputWidth + h_out * inputWidth + int(gl_GlobalInvocationID.x);
    int inputIndex = (c_in * inputHeightPadded + h_in) * inputWidthPadded + w_in;

    // Perform the im2col operation
    output.output[outputIndex] = x[inputIndex];
}
